:py:mod:`palma.components.base`
===============================

.. py:module:: palma.components.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   palma.components.base.Component
   palma.components.base.ProjectComponent
   palma.components.base.ModelComponent
   palma.components.base.Logger




.. py:class:: Component


   Bases: :py:obj:`object`

   .. py:property:: logger


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: add_loger(project)



.. py:class:: ProjectComponent


   Bases: :py:obj:`Component`

   Base Project Component class

   This object ensures that all subclasses Project component implements a

   .. py:method:: __call__(project: palma.base.project.Project) -> None
      :abstractmethod:



.. py:class:: ModelComponent


   Bases: :py:obj:`Component`

   Base Model Component class

   .. py:method:: __call__(project: palma.base.project.Project, model)
      :abstractmethod:



.. py:class:: Logger(uri: str, **kwargs)


   Logger is an abstract class that defines a common
   interface for a set of Logger-subclasses.

   It provides common methods for all possible subclasses, making it 
   possible for a user to create a custom subclass compatible  with 
   the rest of the components. 

   .. py:property:: uri


   .. py:method:: __call__(obj: Union[palma.base.project.Project, palma.base.model_selection.ModelSelector]) -> None


   .. py:method:: log_project(project: palma.base.project.Project) -> None
      :abstractmethod:


   .. py:method:: _log_metrics(**kwargs) -> None
      :abstractmethod:


   .. py:method:: _log_params(**kwargs) -> None
      :abstractmethod:


   .. py:method:: _log_model(**kwargs) -> None
      :abstractmethod:



