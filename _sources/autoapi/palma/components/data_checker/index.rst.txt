:py:mod:`palma.components.data_checker`
=======================================

.. py:module:: palma.components.data_checker


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   palma.components.data_checker.DeepCheck




.. py:class:: DeepCheck(name: str = 'Data Checker', dataset_parameters: dict = None, whole_dataset_checks: Union[List[deepchecks.core.BaseCheck], deepchecks.core.BaseSuite] = data_integrity(), train_test_datasets_checks: Union[List[deepchecks.core.BaseCheck], deepchecks.core.BaseSuite] = Suite('Checks train test', train_test_validation()))


   Bases: :py:obj:`palma.components.Component`

   This object is a wrapper of the Deepchecks library and allows to audit the
   data through various checks such as data drift, duplicate values, ...

   Parameters
   ----------
   dataset_parameters : dict, optional
       Parameters and their values that will be used to generate
       :class:`deepchecks.Dataset` instances (required to run the checks on)
   whole_dataset_checks: Union[List[BaseCheck], BaseSuite], optional
       List of checks or suite of checks that will be run on the whole dataset
       By default: use the default suite single_dataset_integrity to detect
       the integrity issues
   train_test_datasets_checks: Union[List[BaseCheck], BaseSuite], optional
       List of checks or suite of checks to detect issues related to the
       train-test split, such as feature drift, detecting data leakage...
       By default: use the default suites train_test_validation and
       train_test_leakage

   .. py:method:: __call__(project: palma.Project) -> None

      Run suite of checks on the project data.

      Parameters
      ----------
      project: project


   .. py:method:: __generate_datasets(project: palma.Project, **kwargs) -> None

      Generate :class:`deepchecks.Dataset`


      Parameters
      ----------
      project: project
          :class:`~autolm.project.project`


   .. py:method:: __generate_suite(checks: Union[List[deepchecks.core.BaseCheck], deepchecks.core.BaseSuite], name: str) -> deepchecks.tabular.Suite

      Generate a Suite of checks from a list of checks or a suite of checks

      Parameters
      ----------
      checks: Union[List[BaseCheck], BaseSuite], optional
          List of checks or suite of checks
      name: str
          Name for the suite to returned

      Returns
      -------
      suite: :class:`deepchecks.Suite`
          instance of :class:`deepchecks.Suite`


   .. py:method:: items_to_log() -> List[Tuple[str, Any]]

      This method returns the checks' results in two files : an html report
      and a json file.


   .. py:method:: __str__() -> str

      Return str(self).



