:py:mod:`palma.components`
==========================

.. py:module:: palma.components


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   checker/index.rst
   dashboard/index.rst
   data_checker/index.rst
   data_profiler/index.rst
   logger/index.rst
   performance/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   palma.components.Component
   palma.components.FileSystemLogger
   palma.components.MLFlowLogger
   palma.components.ProfilerYData
   palma.components.ExplainerDashboard
   palma.components.RegressionAnalysis
   palma.components.ScoringAnalysis
   palma.components.ShapAnalysis




.. py:class:: Component


   Bases: :py:obj:`object`

   .. py:property:: logger


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: add_loger(project)



.. py:class:: FileSystemLogger(uri: str = tempfile.gettempdir(), **kwargs)


   Bases: :py:obj:`palma.components.base.Logger`

   Parameters
   ----------
   uri : str
       root path or directory, from which will be saved artifacts and metadata 

   .. py:method:: log_project(project: palma.base.project.Project) -> None

      log_project performs the first level of backup as described
      in the object description. 

      This method creates the needed folders and saves an instance of         :class:`~palma.Project`.

      Parameters
      ----------
      project: :class:`~palma.Project`
          an instance of Project


   .. py:method:: _log_metrics(metrics: dict, path: str) -> None


   .. py:method:: _log_model(estimator, path: str) -> None


   .. py:method:: _log_params(parameters: dict, path: str) -> None



.. py:class:: MLFlowLogger(uri: str)


   Bases: :py:obj:`palma.components.base.Logger`

   Logger is an abstract class that defines a common
   interface for a set of Logger-subclasses.

   It provides common methods for all possible subclasses, making it 
   possible for a user to create a custom subclass compatible  with 
   the rest of the components. 

   .. py:method:: log_project(project: palma.base.project.Project) -> None


   .. py:method:: _log_metrics(metrics: dict[str, Any]) -> None


   .. py:method:: _log_artifact(artifact: dict, path) -> None


   .. py:method:: _log_params(params: dict) -> None


   .. py:method:: _log_model(model, path)



.. py:class:: ProfilerYData(**config)


   Bases: :py:obj:`palma.components.base.ProjectComponent`

   Base Project Component class

   This object ensures that all subclasses Project component implements a

   .. py:method:: __call__(project: Project)



.. py:class:: ExplainerDashboard(dashboard_config: Union[str, Dict] = default_config_path, n_sample: int = None)


   Bases: :py:obj:`palma.components.base.Component`

   .. py:method:: __call__(project: Project, model: Model) -> explainerdashboard.ExplainerDashboard

      This function returns dashboard instance. This dashboard is to be run
      using its `run` method.

      Examples
      --------
      >>> db = ExpDash(dashboard_config="path_to_my_config")
      >>> explainer_dashboard = db(project, model)
      >>> explainer_dashboard.run(
      >>>    port="8050", host="0.0.0.0", use_waitress=False)

      Parameters
      ----------
      project: Project
          Instance of project used to compute explainer.
      model: Run
          Current run to use in explainer.


   .. py:method:: update_config(dict_value: Dict[str, Dict])

      Update specific parameters from the actual configuration.

      Parameters
      ----------
      dict_value: dict
          explainer_parameters: dict
              Parameters to be used in see `explainerdashboard.RegressionExplainer`
              or `explainerdashboard.ClassifierExplainer`.
          dashboard_parameters: dict
              Parameters use to compose dashboard tab, items or themes
              for `explainerdashboard.ExplainerDashboard`.
              Tabs and component of the dashboard can be hidden, see
              `customize dashboard section <https://explainerdashboard.readthedocs.io/en/latest/custom.html>`_
              for more detail.

      Example
      -------
      >>> db.update_config({"explainer_parameters":{"shap": "tree"}})


   .. py:method:: _prepare_dataset() -> None

      This function performs the following processing steps :
          - Ensure that column name is str (bug encountered in dashboard)
          - Get code from categories just in case of category data types
          - Sample the data if specified by user


   .. py:method:: _get_explainer(project: Project, model: Model) -> explainerdashboard.explainers.BaseExplainer


   .. py:method:: _get_dashboard(explainer: explainerdashboard.explainers.BaseExplainer) -> ExplainerDashboard



.. py:class:: RegressionAnalysis(on)


   Bases: :py:obj:`Analyser`

   Base Model Component class

   .. py:method:: compute_predictions_errors(fun=None)


   .. py:method:: plot_prediction_versus_real(colormap=plot.get_cmap('rainbow'))


   .. py:method:: plot_errors_pairgrid(fun=None, number_percentiles=4, palette='rocket_r', features=None)



.. py:class:: ScoringAnalysis(on)


   Bases: :py:obj:`Analyser`

   Base Model Component class

   .. py:property:: threshold


   .. py:attribute:: mean_fpr

      

   .. py:method:: confusion_matrix(in_percentage=False)


   .. py:method:: __interpolate_roc(_)


   .. py:method:: plot_roc_curve(plot_method='mean', plot_train: bool = False, c=colors[0], cmap: str = 'inferno', cv_iter=None, label: str = '', mode: str = 'std', label_iter: iter = None, plot_base: bool = True, **kwargs)

      Plot the ROC curve.

      Parameters
      ----------

      plot_method : str,
          Select the type of plot for ROC curve

          - "beam" (default) to plot all the curves using shades
          - "all" to plot each ROC curve
          - "mean" plot the mean ROC curve

      plot_train: bool
          If True the train ROC curves will be plot, default False.

      c: str
          Not used only with plot_method="all". Set the color of ROC curve

      cmap: str

      cv_iter
      label
      mode
      label_iter
      plot_base: bool,
          Plot basic ROC curve helper
      kwargs:
          Deprecated

      Returns
      -------



   .. py:method:: compute_threshold(method: str = 'total_population', value: float = 0.5, metric: Callable = None)

      Compute threshold using various heuristics


   .. py:method:: plot_threshold(**plot_kwargs)



.. py:class:: ShapAnalysis(on, n_shap, compute_interaction=False)


   Bases: :py:obj:`Analyser`

   Base Model Component class

   .. py:method:: __call__(project: Project, model: ModelEvaluation)


   .. py:method:: __select_explainer()


   .. py:method:: _compute_shap_values(n, is_regression, explainer_method=shap.TreeExplainer, compute_interaction=False)


   .. py:method:: __change_features_name_to_string()


   .. py:method:: plot_shap_summary_plot()


   .. py:method:: plot_shap_decision_plot(**kwargs)


   .. py:method:: plot_shap_interaction(feature_x, feature_y)



