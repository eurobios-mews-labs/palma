:py:mod:`palma.components.logger`
=================================

.. py:module:: palma.components.logger


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   palma.components.logger.DummyLogger
   palma.components.logger.FileSystemLogger
   palma.components.logger.MLFlowLogger




Attributes
~~~~~~~~~~

.. autoapisummary::

   palma.components.logger.logger


.. py:data:: logger

   

.. py:class:: DummyLogger(uri: str, **kwargs)


   Bases: :py:obj:`palma.components.base.Logger`

   Logger is an abstract class that defines a common
   interface for a set of Logger-subclasses.

   It provides common methods for all possible subclasses, making it 
   possible for a user to create a custom subclass compatible  with 
   the rest of the components. 

   .. py:method:: log_project(project: palma.base.project.Project) -> None


   .. py:method:: _log_metrics(**kwargs) -> None


   .. py:method:: _log_params(**kwargs) -> None


   .. py:method:: _log_model(**kwargs) -> None



.. py:class:: FileSystemLogger(uri: str = tempfile.gettempdir(), **kwargs)


   Bases: :py:obj:`palma.components.base.Logger`

   Parameters
   ----------
   uri : str
       root path or directory, from which will be saved artifacts and metadata 

   .. py:method:: log_project(project: palma.base.project.Project) -> None

      log_project performs the first level of backup as described
      in the object description. 

      This method creates the needed folders and saves an instance of         :class:`~palma.Project`.

      Parameters
      ----------
      project: :class:`~palma.Project`
          an instance of Project


   .. py:method:: _log_metrics(metrics: dict, path: str) -> None


   .. py:method:: _log_model(estimator, path: str) -> None


   .. py:method:: _log_params(parameters: dict, path: str) -> None



.. py:class:: MLFlowLogger(uri: str)


   Bases: :py:obj:`palma.components.base.Logger`

   Logger is an abstract class that defines a common
   interface for a set of Logger-subclasses.

   It provides common methods for all possible subclasses, making it 
   possible for a user to create a custom subclass compatible  with 
   the rest of the components. 

   .. py:method:: log_project(project: palma.base.project.Project) -> None


   .. py:method:: _log_metrics(metrics: dict[str, Any]) -> None


   .. py:method:: _log_artifact(artifact: dict, path) -> None


   .. py:method:: _log_params(params: dict) -> None


   .. py:method:: _log_model(model, path)



